#!/usr/bin/env python

"""

Copyright(c) <Florian Lier>

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.
Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.
You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier
<flier>@techfak.uni-bielefeld.de

"""

import os
import sys
import cv2
import time
from optparse import OptionParser
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import fromstring

# Parser setup
parser = OptionParser()
parser.add_option("-p", "--path", dest="path", help="write training files to path")
parser.add_option("-r", "--rectangle", dest="rectwidth", help="width of the object tray rectangle")
parser.add_option("-n", "--name", dest="name", help="name of the traing set")
parser.add_option("-i", "--imagecount", dest="imagecount", help="numbers of images to collect")
parser.add_option("-t", "--test", dest="test", help="test your setup")

(options, args) = parser.parse_args()

r_width = int(options.rectwidth)/2
cap = cv2.VideoCapture(0)

if options.test:
    # Run Test
    if not options.rectwidth:
        print ">> For testing you need to provide your object tray rectangle width"
        sys.exit(1)
    while True:
        ret, frame = cap.read()
        img = cv2.cvtColor(frame, 0)
        img_save = cv2.cvtColor(frame, 0)
        height, width, channels = img.shape
        cv2.putText(img, 'Test Object Tray', (width/2-r_width, height/2-r_width-10), cv2.FONT_HERSHEY_DUPLEX, 0.5,
                    (255, 255, 255), 1)
        cv2.rectangle(img, (width/2-r_width, height/2-r_width), (width/2+r_width, height/2+r_width), (51, 153, 255), 2)
        cv2.imshow(':: OTC Collect Data (Quit: press q) ::', img)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            sys.exit(1)

# Check cmd line options
if not options.path or not options.rectwidth or not options.name or not options.imagecount:
    parser.print_help()
    sys.exit(1)

# Prepare directories
data_dir = options.path+'/'+options.name+'/'
data_dir_positive = options.path+'/'+options.name+'/positive/'
data_dir_negative = options.path+'/'+options.name+'/negative/'
file_name = options.name

print ">> Positive Sample Images are Saved to --> %s " % data_dir_positive
# print ">> Negative Sample Images are Saved to --> %s " % data_dir_positive
print ">> Number of Samples --> %d" % int(options.imagecount)

if not os.path.exists(data_dir):
    os.makedirs(data_dir)
else:
    print ">> ERROR: path %s exists" % data_dir
    sys.exit(1)

if not os.path.exists(data_dir_positive):
    os.makedirs(data_dir_positive)
else:
    print ">> ERROR: path %s exists" % data_dir_positive
    sys.exit(1)

if not os.path.exists(data_dir_negative):
    os.makedirs(data_dir_negative)
else:
    print ">>> ERROR: path %s exists" % data_dir_negative
    sys.exit(1)

file_path = str(options.path)

# Helper vars
image_count = int(options.imagecount)
cool_down_time = 3.0
now = time.time()
idx = 0

# XML prep
xml_string = """<?xml version='1.0' encoding='ISO-8859-1'?>
<dataset>
    <name>Training %s</name>
    <comment>OTC Training Images for %s</comment>
    <images>
    </images>
</dataset>
""" % (options.name, options.name)

xml_structure = fromstring(xml_string)
images_tag = None
for image in xml_structure.findall('images'):
    images_tag = image

# Run Positive
while idx < image_count:
    then = time.time()
    ret, frame = cap.read()
    img = cv2.cvtColor(frame, 0)
    img_save = cv2.cvtColor(frame, 0)
    height, width, channels = img.shape
    cv2.putText(img, 'Object Tray Positive', (width/2-r_width, height/2-r_width-10), cv2.FONT_HERSHEY_DUPLEX, 0.5,
                (255, 255, 255), 1)
    cv2.putText(img, 'Next Positive Sample in: ' + str(cool_down_time - (then - now))[:3] + ' Seconds', (15, 15),
                cv2.FONT_HERSHEY_DUPLEX, 0.5, (255, 255, 255), 1)
    cv2.putText(img, 'Samples Taken: ' + str(idx+1), (15, 40), cv2.FONT_HERSHEY_DUPLEX, 0.5, (255, 255, 255), 1)
    cv2.rectangle(img, (width/2-r_width, height/2-r_width), (width/2+r_width, height/2+r_width), (51, 153, 255), 2)
    if then - now >= cool_down_time:
        f_name = data_dir_positive+file_name+str(idx)+'.png'
        cv2.imwrite(f_name, img_save)
        now = time.time()
        cv2.rectangle(img, (width/2-r_width, height/2-r_width), (width/2+r_width, height/2+r_width), (255, 255, 255), 8)
        i = ET.Element("image", file=str(f_name))
        b = ET.Element("box", top=str(height/2-r_width), left=str(width/2-r_width), width=str(r_width*2), height=str(r_width*2))
        i.append(b)
        images_tag.append(i)
        idx += 1
    cv2.imshow(':: OTC Collect Data (Quit: press q) ::', img)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

# Saving training data xml
xml_tree = ET.ElementTree(xml_structure)
print ">> Saving dtc-training.xml to --> %s" % data_dir
xml_tree.write(data_dir+"/otc-training.xml")



